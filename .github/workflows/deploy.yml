name: Deploy ECS Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-central-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Terraform Format Check
      run: terraform fmt -check
      continue-on-error: true
      working-directory: terraform
    - name: Terraform Init
      run: terraform init
      working-directory: terraform
    - name: Terraform Validate
      run: terraform validate -no-color
      working-directory: terraform
    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true
      working-directory: terraform
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      working-directory: terraform
    - name: Get Load Balancer URL
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: lb_url
      run: |
        LB_URL=$(terraform output -raw load_balancer_url)
        echo "url=$LB_URL" >> $GITHUB_OUTPUT
        echo "Load Balancer URL: $LB_URL"
      working-directory: terraform
    - name: Test Application
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Waiting for ECS service to be stable..."
        sleep 60
        echo "Testing application availability..."
        for i in {1..10}; do
          if curl -f "${{ steps.lb_url.outputs.url }}"; then
            echo "Application is responding!"
            break
          else
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
      working-directory: terraform
    - name: Wait before destroy
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Waiting 15 minutes before destroying resources..."
        sleep 900
      working-directory: terraform
            sleep 30
          fi
        done

    - name: Wait before destroy
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Waiting 15 minutes before destroying resources..."
        sleep 900

  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
        working-directory: terraform
